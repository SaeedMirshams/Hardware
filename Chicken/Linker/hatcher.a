;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/19/2016
;Author  : Saeed
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 1.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <string.h>
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0024 // Delay needed for the stabilization of the ADC input voltage
; 0000 0025 delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0026 // Start the AD conversion
; 0000 0027 ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0028 // Wait for the AD conversion to complete
; 0000 0029 while ((ADCSRA & 0x10)==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002A ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002B return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002C }
;PCODE: $00000021 VOL: 0
;
;#define Disp1 PORTC.2
;#define Disp2 PORTC.3
;#define Disp3 PORTC.4
;#define Disp4 PORTC.5
;
;int translate(char x)
; 0000 0034 {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0035 int result=0x0;
; 0000 0036 
; 0000 0037 switch(x){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	x -> Y+2
;	result -> R16,R17
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0038 case '0':
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0039   result=0x3F;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003A break;
;PCODE: $0000002E VOL: 0
; 0000 003B case '1':
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003C  result=0x06;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003D  break;
;PCODE: $00000034 VOL: 0
; 0000 003E case '2':
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003F  result=0x5B;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0040  break;
;PCODE: $0000003A VOL: 0
; 0000 0041 case '3':
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0042  result=0x4F;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0043  break;
;PCODE: $00000040 VOL: 0
; 0000 0044 case '4':
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0045  result=0x66;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0046  break;
;PCODE: $00000046 VOL: 0
; 0000 0047 case '5':
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0048  result=0x6D;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0049  break;
;PCODE: $0000004C VOL: 0
; 0000 004A case '6':
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004B  result=0x7D;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004C  break;
;PCODE: $00000052 VOL: 0
; 0000 004D case '7':
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004E  result=0x07;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004F  break;
;PCODE: $00000058 VOL: 0
; 0000 0050 case '8':
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0051  result=0x7F;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0052  break;
;PCODE: $0000005E VOL: 0
; 0000 0053 case '9':
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0054  result=0x6F;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0055  break;
;PCODE: $00000064 VOL: 0
; 0000 0056 }
;PCODE: $00000065 VOL: 0
; 0000 0057 
; 0000 0058 return result;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0059 }
;PCODE: $0000006A VOL: 0
;
;void displayData(char* number)
; 0000 005C {
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005D int v=0;
; 0000 005E 
; 0000 005F Disp1=0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;	*number -> Y+2
;	v -> R16,R17
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0060 v=translate(number[0]);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0061 PORTB=v;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0062 delay_ms(10);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0063 Disp1=1;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0064 
; 0000 0065 Disp2=0;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0066 v=translate(number[1]);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0067 PORTB=v;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0068 PORTB.7=1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069 delay_ms(10);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006A Disp2=1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006B 
; 0000 006C Disp3=0;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 006D v=translate(number[2]);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 006E PORTB=v;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 006F delay_ms(10);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0070 Disp3=1;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0071 
; 0000 0072 Disp4=0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0073 v=translate(number[3]);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0074 PORTB=v;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0075 delay_ms(10);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0076 Disp4=1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0077 
; 0000 0078 
; 0000 0079 return;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 007A }
;PCODE: $000000AA VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 007F {
;PCODE: $000000AB VOL: 0
; 0000 0080       char str[10]={'1','2','3','4','5','6',' ',' ',' ','\0'};
; 0000 0081       int value=0;
; 0000 0082 
; 0000 0083 // Declare your local variables here
; 0000 0084 
; 0000 0085 // Input/Output Ports initialization
; 0000 0086 // Port B initialization
; 0000 0087 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0088 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0089 PORTB=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;	str -> Y+0
;	value -> R16,R17
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 008A DDRB=0xFF;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 008B 
; 0000 008C // Port C initialization
; 0000 008D // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008E // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008F PORTC=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0090 DDRC=0x3C;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0091 
; 0000 0092 // Port D initialization
; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0094 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0095 PORTD=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0096 DDRD=0x0F;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0097 
; 0000 0098 // Timer/Counter 0 initialization
; 0000 0099 // Clock source: System Clock
; 0000 009A // Clock value: Timer 0 Stopped
; 0000 009B TCCR0=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 009C TCNT0=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 1 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: Timer1 Stopped
; 0000 00A1 // Mode: Normal top=0xFFFF
; 0000 00A2 // OC1A output: Discon.
; 0000 00A3 // OC1B output: Discon.
; 0000 00A4 // Noise Canceler: Off
; 0000 00A5 // Input Capture on Falling Edge
; 0000 00A6 // Timer1 Overflow Interrupt: Off
; 0000 00A7 // Input Capture Interrupt: Off
; 0000 00A8 // Compare A Match Interrupt: Off
; 0000 00A9 // Compare B Match Interrupt: Off
; 0000 00AA TCCR1A=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00AB TCCR1B=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00AC TCNT1H=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00AD TCNT1L=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00AE ICR1H=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00AF ICR1L=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00B0 OCR1AH=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B1 OCR1AL=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00B2 OCR1BH=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B3 OCR1BL=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer/Counter 2 initialization
; 0000 00B6 // Clock source: System Clock
; 0000 00B7 // Clock value: Timer2 Stopped
; 0000 00B8 // Mode: Normal top=0xFF
; 0000 00B9 // OC2 output: Disconnected
; 0000 00BA ASSR=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00BB TCCR2=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00BC TCNT2=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00BD OCR2=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00BE 
; 0000 00BF // External Interrupt(s) initialization
; 0000 00C0 // INT0: Off
; 0000 00C1 // INT1: Off
; 0000 00C2 MCUCR=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C3 
; 0000 00C4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C5 TIMSK=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00C6 
; 0000 00C7 // USART initialization
; 0000 00C8 // USART disabled
; 0000 00C9 UCSRB=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00CA 
; 0000 00CB // Analog Comparator initialization
; 0000 00CC // Analog Comparator: Off
; 0000 00CD // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CE ACSR=0x80;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00CF SFIOR=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00D0 
; 0000 00D1 // ADC initialization
; 0000 00D2 // ADC Clock frequency: 500.000 kHz
; 0000 00D3 // ADC Voltage Reference: AREF pin
; 0000 00D4 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00D5 
; 0000 00D6 ADCSRA=0x81;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00D7 ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00D8 
; 0000 00D9 // SPI initialization
; 0000 00DA // SPI disabled
; 0000 00DB SPCR=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00DC 
; 0000 00DD // TWI initialization
; 0000 00DE // TWI disabled
; 0000 00DF TWCR=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00E0 
; 0000 00E1 while (1)
;PCODE: $000000F3 VOL: 0
; 0000 00E2       {
; 0000 00E3       // Place your code here
; 0000 00E4 
; 0000 00E5       long k=read_adc(1);
; 0000 00E6       long l= k * 50000;
; 0000 00E7       value= l >> 10 ;
;PCODE: $000000F4 VOL: 0
;	str -> Y+8
;	k -> Y+4
;	l -> Y+0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00E8       if(value>3800)
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00E9        PORTD.0=0;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00EA       else
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00EB       if(value<3600)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00EC       {
; 0000 00ED        PORTD.0=1;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00EE        }
; 0000 00EF 
; 0000 00F0         itoa(value,str);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00F1         while(strlen(str)<4)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00F2         {
; 0000 00F3          str[3]=str[2];
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00F4          str[2]=str[1];
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00F5          str[1]=str[0];
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00F6          str[0]='0';
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00F7         }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00F8 
; 0000 00F9 
; 0000 00FA         displayData(str );
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00FB         PORTD.1=1-PIND.1;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00FC 
; 0000 00FD 
; 0000 00FE       }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00FF }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
