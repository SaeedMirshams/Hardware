;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Hatcher
;Version : 1.0
;Date    : 2017/1/25
;Author  : Saeed
;Company : Mirshams
;Comments:
;For Hatching
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;#define STATE_NORMAL 0
;
;typedef unsigned char byte;
;/*
;
;// table for the user defined character
;// arrow that points to the top right corner
;flash byte char_table[]={
;0b10000000,
;0b10000000,
;0b10000000,
;0b10000000,
;0b10000000,
;0b10010101,
;0b10111111,
;0b10000000
;};
;// function used to define user characters
;void define_char(byte flash *pc,byte char_code)
;{
;byte i,address;
;address=(char_code<<3)|0x40;
;for (i=0; i<8; i++) lcd_write_byte(address++,*pc++);
;}
;*/
;int tick;
;long int clock=0;
;int currentTemperature;
;eeprom long int start_date=0;
;eeprom int temp1;
;eeprom int temp1analog;
;eeprom int temp2;
;eeprom int temp2analog;
;eeprom int Mintemp=36;
;eeprom int Maxtemp=37;
;
;void showNormal()
; 0000 0047 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0048 int day,hour,minut,second;
; 0000 0049 int tim=clock;
; 0000 004A float degtemp=0.0;
; 0000 004B char timstr[]="99 24:60:60";
; 0000 004C second=tim%60;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;	day -> R16,R17
;	hour -> R18,R19
;	minut -> R20,R21
;	second -> Y+24
;	tim -> Y+22
;	degtemp -> Y+18
;	timstr -> Y+6
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 004D   tim=tim/60;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004E   minut=tim%60;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004F   tim=tim/60;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0050   hour=tim%24;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0051   tim=tim/24;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0052   day=tim;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0053 degtemp= (float)(currentTemperature- temp1analog)*(temp2-temp1)/(float)(temp2analog-temp1analog)-temp1;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0054 
; 0000 0055 sprintf(timstr,"%2d %2d:%2d:%2d ",day,hour,minut,second);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0056 
; 0000 0057 lcd_gotoxy(0,0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0058 lcd_puts(timstr);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0059 
; 0000 005A ftoa(degtemp,2,timstr);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005B lcd_puts(timstr);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005C lcd_puts(" C");
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005D lcd_gotoxy(0,1);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005E 
; 0000 005F }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0

	.DSEG
_0x4:
	.BYTE 0x3
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0063 {

	.CSEG
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0064  tick++;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0065  if(tick>18)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0066  {
; 0000 0067    tick-=18;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0068    clock++;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0069  }
; 0000 006A  TCNT0=0x27;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 006B }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;
;
;
;#define ADC_VREF_TYPE 0x40
;
;#define	LCD_CONTROL	0x08
;#define	LCD_DISPLAY	0x04
;#define	LCD_CURSOR	0x02
;#define	LCD_BLINK	0x01
;
;#define	LCD_CURSOR_ON	(LCD_CONTROL | LCD_DISPLAY | LCD_CURSOR | LCD_BLINK)
;#define	LCD_CURSOR_OFF	(LCD_CONTROL | LCD_DISPLAY)
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 007B {
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 007C ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000009C VOL: 0
;	adc_input -> Y+0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 007D // Delay needed for the stabilization of the ADC input voltage
; 0000 007E delay_us(10);
;PCODE: $000000A0 VOL: 0
; 0000 007F // Start the AD conversion
; 0000 0080 ADCSRA|=0x40;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0081 // Wait for the AD conversion to complete
; 0000 0082 while ((ADCSRA & 0x10)==0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0083 ADCSRA|=0x10;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0084 return ADCW;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0085 }
;PCODE: $000000AE VOL: 0
;
;// Declare your global variables here
;
;
;int lastkey=15;
;byte readkey()
; 0000 008C {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008D byte result=0;
; 0000 008E byte newkey = ~(PINC>>3)&0b00001111;
; 0000 008F if(newkey==lastkey)
;PCODE: $000000B1 VOL: 0
;	result -> R17
;	newkey -> R16
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0090 {
; 0000 0091  result=0;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0092 }
; 0000 0093 else
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0094 {
; 0000 0095  result=newkey;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0096 }
;PCODE: $000000C5 VOL: 0
; 0000 0097 lastkey=newkey;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0098 return result;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0099 }
;PCODE: $000000CC VOL: 0
;
;
;void main(void)
; 0000 009D {
;PCODE: $000000CD VOL: 0
; 0000 009E int state=STATE_NORMAL;
; 0000 009F 
; 0000 00A0 start_date=0;
;	state -> R16,R17
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A1 temp1=0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00A2 temp1analog=0;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00A3 temp2=500;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A4 temp2analog=1024;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00A5 
; 0000 00A6 
; 0000 00A7 // Input/Output Ports initialization
; 0000 00A8 // Port B initialization
; 0000 00A9 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
; 0000 00AA // State7=0 State6=0 State5=0 State4=0 State3=T State2=0 State1=0 State0=0
; 0000 00AB PORTB=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00AC DDRB=0xF7;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00AD 
; 0000 00AE // Port C initialization
; 0000 00AF // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B0 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B1 PORTC=(1 << 6) | (1 << 5) | (1 << 4) | (1 << 3);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00B2 DDRC=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00B3 
; 0000 00B4 // Port D initialization
; 0000 00B5 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00B6 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B7 PORTD=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00B8 DDRD=0xFF;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B9 
; 0000 00BA // Timer/Counter 0 initialization
; 0000 00BB // Clock source: System Clock
; 0000 00BC // Clock value: 3.906 kHz
; 0000 00BD TCCR0=0x05;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00BE TCNT0=0x27;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00BF 
; 0000 00C0 // Timer/Counter 1 initialization
; 0000 00C1 // Clock source: System Clock
; 0000 00C2 // Clock value: Timer1 Stopped
; 0000 00C3 // Mode: Normal top=0xFFFF
; 0000 00C4 // OC1A output: Discon.
; 0000 00C5 // OC1B output: Discon.
; 0000 00C6 // Noise Canceler: Off
; 0000 00C7 // Input Capture on Falling Edge
; 0000 00C8 // Timer1 Overflow Interrupt: Off
; 0000 00C9 // Input Capture Interrupt: Off
; 0000 00CA // Compare A Match Interrupt: Off
; 0000 00CB // Compare B Match Interrupt: Off
; 0000 00CC TCCR1A=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00CD TCCR1B=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00CE TCNT1H=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00CF TCNT1L=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00D0 ICR1H=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00D1 ICR1L=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00D2 OCR1AH=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00D3 OCR1AL=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00D4 OCR1BH=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00D5 OCR1BL=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00D6 
; 0000 00D7 // Timer/Counter 2 initialization
; 0000 00D8 // Clock source: System Clock
; 0000 00D9 // Clock value: Timer2 Stopped
; 0000 00DA // Mode: Normal top=0xFF
; 0000 00DB // OC2 output: Disconnected
; 0000 00DC ASSR=0x00;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00DD TCCR2=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00DE TCNT2=0x00;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00DF OCR2=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00E0 
; 0000 00E1 // External Interrupt(s) initialization
; 0000 00E2 // INT0: Off
; 0000 00E3 // INT1: Off
; 0000 00E4 MCUCR=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00E5 
; 0000 00E6 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E7 TIMSK=0x01;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00E8 
; 0000 00E9 // USART initialization
; 0000 00EA // USART disabled
; 0000 00EB UCSRB=0x00;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00EC 
; 0000 00ED // Analog Comparator initialization
; 0000 00EE // Analog Comparator: Off
; 0000 00EF // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F0 ACSR=0x80;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00F1 SFIOR=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00F2 
; 0000 00F3 // ADC initialization
; 0000 00F4 // ADC Clock frequency: 1000.000 kHz
; 0000 00F5 // ADC Voltage Reference: AVCC pin
; 0000 00F6 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00F7 ADCSRA=0x82;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00F8 
; 0000 00F9 // SPI initialization
; 0000 00FA // SPI disabled
; 0000 00FB SPCR=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00FC 
; 0000 00FD // TWI initialization
; 0000 00FE // TWI disabled
; 0000 00FF TWCR=0x00;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0100 
; 0000 0101 // Alphanumeric LCD initialization
; 0000 0102 // Connections are specified in the
; 0000 0103 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0104 // RS - PORTB Bit 0
; 0000 0105 // RD - PORTB Bit 1
; 0000 0106 // EN - PORTB Bit 2
; 0000 0107 // D4 - PORTB Bit 4
; 0000 0108 // D5 - PORTB Bit 5
; 0000 0109 // D6 - PORTB Bit 6
; 0000 010A // D7 - PORTB Bit 7
; 0000 010B // Characters/line: 16
; 0000 010C lcd_init(16*2);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 010D // Global enable interrupts
; 0000 010E lcd_clear();
;PCODE: $0000011F VOL: 0
; 0000 010F _lcd_write_data (LCD_CURSOR_ON);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0110 
; 0000 0111 
; 0000 0112 #asm("sei")
;PCODE: $00000122 VOL: 0
	sei
;PCODE: $00000123 VOL: 0
; 0000 0113 
; 0000 0114 while (1)
;PCODE: $00000124 VOL: 0
; 0000 0115       {
; 0000 0116       int key;
; 0000 0117       char str[]="00000000";
; 0000 0118       currentTemperature=read_adc(0);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;	key -> Y+9
;	str -> Y+0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0119       PORTD.0=!PORTD.0;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 011A 
; 0000 011B       switch(state)
;PCODE: $00000137 VOL: 0
; 0000 011C       {
; 0000 011D       case STATE_NORMAL:
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 011E        showNormal();
;PCODE: $0000013A VOL: 0
; 0000 011F        break;
;PCODE: $0000013B VOL: 0
; 0000 0120        default:
;PCODE: $0000013C VOL: 0
; 0000 0121       }
;PCODE: $0000013D VOL: 0
; 0000 0122       key=readkey();
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0123       sprintf(str,"%x",key);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0124       lcd_gotoxy(10,1);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0125       lcd_puts(str);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0126       lcd_puts("   ");
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0127       delay_ms(500);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0128       }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0129 }
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0

	.DSEG
_0x16:
	.BYTE 0x4
