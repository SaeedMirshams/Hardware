;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Hatcher
;Version : 1.0
;Date    : 2017/1/25
;Author  : Saeed
;Company : Mirshams
;Comments:
;For Hatching
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 4.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;
;
;typedef unsigned char byte;
;
;// table for the user defined character
;// arrow that points to the top right corner
;flash byte char_table[6][8]={
;{
;0b11111111,
;0b10001110,
;0b10000100,
;0b10000000,
;0b10000000,
;0b10000000,
;0b10000000,
;0b10000000
;},{
;0b10000000,
;0b11111111,
;0b10001110,
;0b10000100,
;0b10000000,
;0b10000000,
;0b10000000,
;0b10000000
;},{
;0b10000000,
;0b10000000,
;0b11111111,
;0b10001110,
;0b10000100,
;0b10000000,
;0b10000000,
;0b10000000
;},{
;0b10000000,
;0b10000000,
;0b10000000,
;0b11111111,
;0b10001110,
;0b10000100,
;0b10000000,
;0b10000000
;},{
;0b10000000,
;0b10000000,
;0b10000000,
;0b10000000,
;0b11111111,
;0b10001110,
;0b10000100,
;0b10000000
;}
;}
;;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 005A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005B TCNT0=0x27;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 005C 
; 0000 005D }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;
;int test()
; 0000 0061 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0062 return 100;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0063 }
;PCODE: $00000018 VOL: 0
;
;// function used to define user characters
;void define_char(byte flash *pc,byte char_code)
; 0000 0067 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0068 byte i,address;
; 0000 0069 address=(char_code<<3)|0x40;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;	*pc -> Y+3
;	char_code -> Y+2
;	i -> R17
;	address -> R16
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 006A for (i=0; i<8; i++) lcd_write_byte(address++,*pc++);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006B }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;
;#define ADC_VREF_TYPE 0x40
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0072 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0073 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000003D VOL: 0
;	adc_input -> Y+0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0074 // Delay needed for the stabilization of the ADC input voltage
; 0000 0075 delay_us(10);
;PCODE: $00000041 VOL: 0
; 0000 0076 // Start the AD conversion
; 0000 0077 ADCSRA|=0x40;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0078 // Wait for the AD conversion to complete
; 0000 0079 while ((ADCSRA & 0x10)==0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007A ADCSRA|=0x10;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007B return ADCW;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007C }
;PCODE: $0000004F VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0081 {
;PCODE: $00000050 VOL: 0
; 0000 0082 int i;
; 0000 0083 // Input/Output Ports initialization
; 0000 0084 // Port B initialization
; 0000 0085 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=Out Func0=Out
; 0000 0086 // State7=0 State6=0 State5=0 State4=0 State3=T State2=0 State1=0 State0=0
; 0000 0087 PORTB=0x00;
;	i -> R16,R17
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0088 DDRB=0xF7;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0089 
; 0000 008A // Port C initialization
; 0000 008B // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008C // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008D PORTC=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008E DDRC=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008F 
; 0000 0090 // Port D initialization
; 0000 0091 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0092 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0093 PORTD=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0094 DDRD=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0095 
; 0000 0096 // Timer/Counter 0 initialization
; 0000 0097 // Clock source: System Clock
; 0000 0098 // Clock value: 3.906 kHz
; 0000 0099 TCCR0=0x05;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009A TCNT0=0x27;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 009B 
; 0000 009C // Timer/Counter 1 initialization
; 0000 009D // Clock source: System Clock
; 0000 009E // Clock value: Timer1 Stopped
; 0000 009F // Mode: Normal top=0xFFFF
; 0000 00A0 // OC1A output: Discon.
; 0000 00A1 // OC1B output: Discon.
; 0000 00A2 // Noise Canceler: Off
; 0000 00A3 // Input Capture on Falling Edge
; 0000 00A4 // Timer1 Overflow Interrupt: Off
; 0000 00A5 // Input Capture Interrupt: Off
; 0000 00A6 // Compare A Match Interrupt: Off
; 0000 00A7 // Compare B Match Interrupt: Off
; 0000 00A8 TCCR1A=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00A9 TCCR1B=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00AA TCNT1H=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00AB TCNT1L=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00AC ICR1H=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00AD ICR1L=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00AE OCR1AH=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00AF OCR1AL=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00B0 OCR1BH=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B1 OCR1BL=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00B2 
; 0000 00B3 // Timer/Counter 2 initialization
; 0000 00B4 // Clock source: System Clock
; 0000 00B5 // Clock value: Timer2 Stopped
; 0000 00B6 // Mode: Normal top=0xFF
; 0000 00B7 // OC2 output: Disconnected
; 0000 00B8 ASSR=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00B9 TCCR2=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00BA TCNT2=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BB OCR2=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00BC 
; 0000 00BD // External Interrupt(s) initialization
; 0000 00BE // INT0: Off
; 0000 00BF // INT1: Off
; 0000 00C0 MCUCR=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C1 
; 0000 00C2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C3 TIMSK=0x01;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C4 
; 0000 00C5 // USART initialization
; 0000 00C6 // USART disabled
; 0000 00C7 UCSRB=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00C8 
; 0000 00C9 // Analog Comparator initialization
; 0000 00CA // Analog Comparator: Off
; 0000 00CB // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00CC ACSR=0x80;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00CD SFIOR=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00CE 
; 0000 00CF // ADC initialization
; 0000 00D0 // ADC Clock frequency: 1000.000 kHz
; 0000 00D1 // ADC Voltage Reference: AVCC pin
; 0000 00D2 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00D3 ADCSRA=0x82;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00D4 
; 0000 00D5 // SPI initialization
; 0000 00D6 // SPI disabled
; 0000 00D7 SPCR=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D8 
; 0000 00D9 // TWI initialization
; 0000 00DA // TWI disabled
; 0000 00DB TWCR=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00DC 
; 0000 00DD // Alphanumeric LCD initialization
; 0000 00DE // Connections are specified in the
; 0000 00DF // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00E0 // RS - PORTB Bit 0
; 0000 00E1 // RD - PORTB Bit 1
; 0000 00E2 // EN - PORTB Bit 2
; 0000 00E3 // D4 - PORTB Bit 4
; 0000 00E4 // D5 - PORTB Bit 5
; 0000 00E5 // D6 - PORTB Bit 6
; 0000 00E6 // D7 - PORTB Bit 7
; 0000 00E7 // Characters/line: 16
; 0000 00E8 lcd_init(16*2);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00E9 
; 0000 00EA // Global enable interrupts
; 0000 00EB       lcd_clear();
;PCODE: $00000091 VOL: 0
; 0000 00EC #asm("sei")
;PCODE: $00000092 VOL: 0
	sei
;PCODE: $00000093 VOL: 0
; 0000 00ED 
; 0000 00EE for(i=0;i<32;i++)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00EF {
; 0000 00F0  define_char(char_table[i%6],i);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00F1 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00F2 while (1)
;PCODE: $000000AA VOL: 0
; 0000 00F3       {
; 0000 00F4       lcd_gotoxy(0,0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00F5       lcd_puts("SALAM");
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00F6       for(i=0;i<100;i++)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F7        lcd_putchar(i);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F8 delay_ms(1000);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F9       }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00FA }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0

	.DSEG
_0xF:
	.BYTE 0x6
